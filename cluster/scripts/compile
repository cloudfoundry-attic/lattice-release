#!/bin/bash

set -e

setup_go_env() {
    echo "setting up go env"
    rm -rf ${output_dir}/*
    rm -rf ${GOPATH}/pkg/*

    rm -rf ${temp_workspace}
    mkdir -p ${temp_workspace}
}

construct_temp_workspace() {
    echo "copying diego release"
    cp -a ${diego_release_path}/ ${temp_workspace}/
    rm -f ${temp_workspace}/diego-release/src/github.com/cloudfoundry-incubator/lattice
    echo "copying cf release"
    mkdir -p ${temp_workspace}/cf-release/src
    cp -a ${cf_release_path}/src/github.com/cloudfoundry/gorouter ${temp_workspace}/diego-release/src/github.com/cloudfoundry
    cp -a ${cf_release_path}/src/loggregator ${temp_workspace}/cf-release/src
    echo "copying cell helpers"
    mkdir -p ${temp_workspace}/diego-release/src/github.com/cloudfoundry-incubator/lattice/
    cp -a ${lattice_path}/cell-helpers/ ${temp_workspace}/diego-release/src/github.com/cloudfoundry-incubator/lattice/
    echo "copying routing release"
    cp -a ${routing_release_path}/src/github.com/cloudfoundry-incubator/tcp-emitter \
        ${temp_workspace}/diego-release/src/github.com/cloudfoundry-incubator
    cp -a ${routing_release_path}/src/github.com/cloudfoundry-incubator/cf-tcp-router \
        ${temp_workspace}/diego-release/src/github.com/cloudfoundry-incubator
}

compile_garden_linux() {
    echo "compiling garden linux"

    mkdir -p /tmp/btrfs-progs
    pushd /tmp/btrfs-progs
        git clone git://git.kernel.org/pub/scm/linux/kernel/git/kdave/btrfs-progs.git .

        ./autogen.sh
        ./configure
        make install
    popd

    mkdir -p ${output_dir}/cell/garden
    rm -rf ${GOPATH}/pkg/*
    rm -rf ${GOPATH}/src/garden-linux-release/src/github.com/cloudfoundry-incubator/garden-linux/Godeps/_workspace/pkg/*

    GOPATH=${GOPATH}/src/garden-linux-release:${GOPATH} \
        go install -tags daemon github.com/cloudfoundry-incubator/garden-linux

    pushd ${diego_release_path}/src/garden-linux-release/src/github.com/cloudfoundry-incubator/garden-linux
        GOPATH=${GOPATH}/src/garden-linux-release:${GOPATH} make
        cp -a linux_backend/bin ${output_dir}/cell/garden/garden-bin
        cp -a linux_backend/skeleton ${output_dir}/cell/garden/skeleton
    popd

    rm -rf ${GOPATH}/pkg/*
}

compile_gorouter() {
    echo "compiling gorouter"
    rm -rf ${GOPATH}/src/github.com/cloudfoundry/gorouter/Godeps/_workspace/pkg
    GOPATH=${GOPATH}/src/github.com/cloudfoundry/gorouter/Godeps/_workspace:${GOPATH} \
        go install github.com/cloudfoundry/gorouter
}

compile_tcp_routing() {
    echo "compiling tcp routing"
    pushd ${GOPATH}
        go install github.com/cloudfoundry-incubator/tcp-emitter/cmd/tcp-emitter
        go install github.com/cloudfoundry-incubator/cf-tcp-router/cmd/router-configurer
    popd

    compile_haproxy
}

compile_haproxy() {
    pushd ${temp_workspace}
        echo "Extracting pcre..."
        tar xzf ./download/haproxy_pcre.tgz
        pushd pcre-8.37
            ./configure
            make
            make install
        popd


        tar xzf ./download/haproxy.tgz
        pushd haproxy-1.5.14
            make TARGET=linux2628 USE_OPENSSL=1 USE_STATIC_PCRE=1
            cp haproxy $GOBIN/
            chmod +x $GOBIN/haproxy
        popd
    popd
}

compile_brain_loggregator() {
    echo "compiling brain loggregator"
    pushd ${temp_workspace}/cf-release/src/loggregator
        GOPATH=$(pwd) go install trafficcontroller
        GOPATH=$(pwd) go install doppler
        GOPATH=$(pwd) go install metron
    popd
}

compile_cell_loggregator() {
    echo "compiling cell loggregator"
    pushd ${temp_workspace}/cf-release/src/loggregator
        GOPATH=$(pwd) go install metron
    popd
}

stage_common() {
    echo "staging common files"
    mkdir -p ${temp_workspace}/download
    CONSUL_OBJECT_ID="3e6c1e47-95a5-45ef-aeec-2cb4cc4c529a"
    wget --quiet "http://blob.cfblob.com/${CONSUL_OBJECT_ID}" -O ${temp_workspace}/download/consul.zip

    mkdir -p ${output_dir}/common
    cp -a ${lattice_path}/cluster/common/* ${output_dir}/common/

    stage_haproxy
}

stage_haproxy() {
    echo "staging haproxy"
    HAPROXY_OBJECT_ID="02657a44-3292-4e0b-8b18-bcad061a2381"
    HAPROXY_PCRE_OBJECT_ID="22601a5f-4ef4-4621-80aa-0fa1f8067db6"

    wget --quiet "http://blob.cfblob.com/${HAPROXY_OBJECT_ID}" -O ${temp_workspace}/download/haproxy.tgz
    wget --quiet "http://blob.cfblob.com/${HAPROXY_PCRE_OBJECT_ID}" -O ${temp_workspace}/download/haproxy_pcre.tgz
}

stage_scripts() {
    echo "staging scripts"
    mkdir -p ${output_dir}/scripts
    cp -a ${lattice_path}/cluster/scripts/* ${output_dir}/scripts/
}

compile_cell() {
    echo "compiling cell"
    export GOBIN=${output_dir}/cell/bin
    compile_garden_linux

    pushd ${GOPATH}
        go install github.com/cloudfoundry-incubator/rep/cmd/rep
        go install github.com/cloudfoundry-incubator/auctioneer/cmd/auctioneer
        go install github.com/cloudfoundry-incubator/converger/cmd/converger
        go install github.com/cloudfoundry-incubator/lattice/cell-helpers/tee2metron
    popd

    rm -rf ${GOPATH}/pkg/*
    compile_cell_loggregator

    pushd ${GOBIN}
        unzip ${temp_workspace}/download/consul.zip
        chmod +x ${GOBIN}/consul
    popd

    cp -a ${lattice_path}/cluster/cell/ ${output_dir}/

    unset GOBIN
}

compile_brain() {
    echo "compiling brain"
    export GOBIN=${output_dir}/brain/bin

    pushd ${GOPATH}
        go install github.com/cloudfoundry-incubator/route-emitter/cmd/route-emitter
        go install github.com/apcera/gnatsd
        go install github.com/cloudfoundry-incubator/receptor/cmd/receptor
        go install github.com/cloudfoundry-incubator/file-server/cmd/file-server
        go install github.com/cloudfoundry-incubator/healthcheck/cmd/healthcheck
        go install github.com/cloudfoundry-incubator/buildpack_app_lifecycle/builder
        go install github.com/cloudfoundry-incubator/buildpack_app_lifecycle/launcher

        go install github.com/cloudfoundry-incubator/lattice/cell-helpers/davtool

        pushd src/github.com/coreos/etcd
            ./build
            cp bin/etcd ${GOBIN}
        popd
        go install github.com/cloudfoundry-incubator/bbs/cmd/bbs
    popd

    rm -rf ${GOPATH}/pkg

    compile_gorouter
    compile_tcp_routing
    compile_brain_loggregator

    pushd ${GOBIN}
        unzip ${temp_workspace}/download/consul.zip
        chmod +x ${GOBIN}/consul
    popd

    cp -a ${lattice_path}/cluster/brain/ ${output_dir}/

    unset GOBIN
}

if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] || [ -z "$5" ]; then
    echo "Incorrect Usage. Usage: $0 output-dir diego-release-path cf-release-path routing-release-path lattice-path"
    exit 1
fi

declare -r output_dir=$1
declare -r diego_release_path=$2
declare -r cf_release_path=$3
declare -r routing_release_path=$4
declare -r lattice_path=$5
export GOOS=linux
export GOARCH=amd64
declare -r temp_workspace=`mktemp -d /tmp/lattice.XXXXXX`
export GOPATH=${temp_workspace}/diego-release

if [ -n "$DEBUG" ]; then
    set -x
fi

setup_go_env
construct_temp_workspace

stage_common
stage_scripts
compile_cell
compile_brain
