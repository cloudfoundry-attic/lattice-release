// This file was generated by counterfeiter
package fake_app_runner

import (
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/app_runner"
)

type FakeAppRunner struct {
	CreateAppStub        func(params app_runner.CreateAppParams) error
	createAppMutex       sync.RWMutex
	createAppArgsForCall []struct {
		params app_runner.CreateAppParams
	}
	createAppReturns struct {
		result1 error
	}
	SubmitLrpStub        func(lrpJSON []byte) (string, error)
	submitLrpMutex       sync.RWMutex
	submitLrpArgsForCall []struct {
		lrpJSON []byte
	}
	submitLrpReturns struct {
		result1 string
		result2 error
	}
	ScaleAppStub        func(name string, instances int) error
	scaleAppMutex       sync.RWMutex
	scaleAppArgsForCall []struct {
		name      string
		instances int
	}
	scaleAppReturns struct {
		result1 error
	}
	UpdateAppRoutesStub        func(name string, routes app_runner.RouteOverrides) error
	updateAppRoutesMutex       sync.RWMutex
	updateAppRoutesArgsForCall []struct {
		name   string
		routes app_runner.RouteOverrides
	}
	updateAppRoutesReturns struct {
		result1 error
	}
	UpdateAppStub        func(updateAppParams app_runner.UpdateAppParams) error
	updateAppMutex       sync.RWMutex
	updateAppArgsForCall []struct {
		updateAppParams app_runner.UpdateAppParams
	}
	updateAppReturns struct {
		result1 error
	}
	RemoveAppStub        func(name string) error
	removeAppMutex       sync.RWMutex
	removeAppArgsForCall []struct {
		name string
	}
	removeAppReturns struct {
		result1 error
	}
}

func (fake *FakeAppRunner) CreateApp(params app_runner.CreateAppParams) error {
	fake.createAppMutex.Lock()
	fake.createAppArgsForCall = append(fake.createAppArgsForCall, struct {
		params app_runner.CreateAppParams
	}{params})
	fake.createAppMutex.Unlock()
	if fake.CreateAppStub != nil {
		return fake.CreateAppStub(params)
	} else {
		return fake.createAppReturns.result1
	}
}

func (fake *FakeAppRunner) CreateAppCallCount() int {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	return len(fake.createAppArgsForCall)
}

func (fake *FakeAppRunner) CreateAppArgsForCall(i int) app_runner.CreateAppParams {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	return fake.createAppArgsForCall[i].params
}

func (fake *FakeAppRunner) CreateAppReturns(result1 error) {
	fake.CreateAppStub = nil
	fake.createAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRunner) SubmitLrp(lrpJSON []byte) (string, error) {
	fake.submitLrpMutex.Lock()
	fake.submitLrpArgsForCall = append(fake.submitLrpArgsForCall, struct {
		lrpJSON []byte
	}{lrpJSON})
	fake.submitLrpMutex.Unlock()
	if fake.SubmitLrpStub != nil {
		return fake.SubmitLrpStub(lrpJSON)
	} else {
		return fake.submitLrpReturns.result1, fake.submitLrpReturns.result2
	}
}

func (fake *FakeAppRunner) SubmitLrpCallCount() int {
	fake.submitLrpMutex.RLock()
	defer fake.submitLrpMutex.RUnlock()
	return len(fake.submitLrpArgsForCall)
}

func (fake *FakeAppRunner) SubmitLrpArgsForCall(i int) []byte {
	fake.submitLrpMutex.RLock()
	defer fake.submitLrpMutex.RUnlock()
	return fake.submitLrpArgsForCall[i].lrpJSON
}

func (fake *FakeAppRunner) SubmitLrpReturns(result1 string, result2 error) {
	fake.SubmitLrpStub = nil
	fake.submitLrpReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRunner) ScaleApp(name string, instances int) error {
	fake.scaleAppMutex.Lock()
	fake.scaleAppArgsForCall = append(fake.scaleAppArgsForCall, struct {
		name      string
		instances int
	}{name, instances})
	fake.scaleAppMutex.Unlock()
	if fake.ScaleAppStub != nil {
		return fake.ScaleAppStub(name, instances)
	} else {
		return fake.scaleAppReturns.result1
	}
}

func (fake *FakeAppRunner) ScaleAppCallCount() int {
	fake.scaleAppMutex.RLock()
	defer fake.scaleAppMutex.RUnlock()
	return len(fake.scaleAppArgsForCall)
}

func (fake *FakeAppRunner) ScaleAppArgsForCall(i int) (string, int) {
	fake.scaleAppMutex.RLock()
	defer fake.scaleAppMutex.RUnlock()
	return fake.scaleAppArgsForCall[i].name, fake.scaleAppArgsForCall[i].instances
}

func (fake *FakeAppRunner) ScaleAppReturns(result1 error) {
	fake.ScaleAppStub = nil
	fake.scaleAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRunner) UpdateAppRoutes(name string, routes app_runner.RouteOverrides) error {
	fake.updateAppRoutesMutex.Lock()
	fake.updateAppRoutesArgsForCall = append(fake.updateAppRoutesArgsForCall, struct {
		name   string
		routes app_runner.RouteOverrides
	}{name, routes})
	fake.updateAppRoutesMutex.Unlock()
	if fake.UpdateAppRoutesStub != nil {
		return fake.UpdateAppRoutesStub(name, routes)
	} else {
		return fake.updateAppRoutesReturns.result1
	}
}

func (fake *FakeAppRunner) UpdateAppRoutesCallCount() int {
	fake.updateAppRoutesMutex.RLock()
	defer fake.updateAppRoutesMutex.RUnlock()
	return len(fake.updateAppRoutesArgsForCall)
}

func (fake *FakeAppRunner) UpdateAppRoutesArgsForCall(i int) (string, app_runner.RouteOverrides) {
	fake.updateAppRoutesMutex.RLock()
	defer fake.updateAppRoutesMutex.RUnlock()
	return fake.updateAppRoutesArgsForCall[i].name, fake.updateAppRoutesArgsForCall[i].routes
}

func (fake *FakeAppRunner) UpdateAppRoutesReturns(result1 error) {
	fake.UpdateAppRoutesStub = nil
	fake.updateAppRoutesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRunner) UpdateApp(updateAppParams app_runner.UpdateAppParams) error {
	fake.updateAppMutex.Lock()
	fake.updateAppArgsForCall = append(fake.updateAppArgsForCall, struct {
		updateAppParams app_runner.UpdateAppParams
	}{updateAppParams})
	fake.updateAppMutex.Unlock()
	if fake.UpdateAppStub != nil {
		return fake.UpdateAppStub(updateAppParams)
	} else {
		return fake.updateAppReturns.result1
	}
}

func (fake *FakeAppRunner) UpdateAppCallCount() int {
	fake.updateAppMutex.RLock()
	defer fake.updateAppMutex.RUnlock()
	return len(fake.updateAppArgsForCall)
}

func (fake *FakeAppRunner) UpdateAppArgsForCall(i int) app_runner.UpdateAppParams {
	fake.updateAppMutex.RLock()
	defer fake.updateAppMutex.RUnlock()
	return fake.updateAppArgsForCall[i].updateAppParams
}

func (fake *FakeAppRunner) UpdateAppReturns(result1 error) {
	fake.UpdateAppStub = nil
	fake.updateAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRunner) RemoveApp(name string) error {
	fake.removeAppMutex.Lock()
	fake.removeAppArgsForCall = append(fake.removeAppArgsForCall, struct {
		name string
	}{name})
	fake.removeAppMutex.Unlock()
	if fake.RemoveAppStub != nil {
		return fake.RemoveAppStub(name)
	} else {
		return fake.removeAppReturns.result1
	}
}

func (fake *FakeAppRunner) RemoveAppCallCount() int {
	fake.removeAppMutex.RLock()
	defer fake.removeAppMutex.RUnlock()
	return len(fake.removeAppArgsForCall)
}

func (fake *FakeAppRunner) RemoveAppArgsForCall(i int) string {
	fake.removeAppMutex.RLock()
	defer fake.removeAppMutex.RUnlock()
	return fake.removeAppArgsForCall[i].name
}

func (fake *FakeAppRunner) RemoveAppReturns(result1 error) {
	fake.RemoveAppStub = nil
	fake.removeAppReturns = struct {
		result1 error
	}{result1}
}

var _ app_runner.AppRunner = new(FakeAppRunner)
