// This file was generated by counterfeiter
package fake_app_runner

import (
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/app_runner/docker_app_runner"
)

type FakeAppRunner struct {
	CreateDockerAppStub        func(params docker_app_runner.CreateDockerAppParams) error
	createDockerAppMutex       sync.RWMutex
	createDockerAppArgsForCall []struct {
		params docker_app_runner.CreateDockerAppParams
	}
	createDockerAppReturns struct {
		result1 error
	}
	CreateLrpStub        func(createLrpJson []byte) (string, error)
	createLrpMutex       sync.RWMutex
	createLrpArgsForCall []struct {
		createLrpJson []byte
	}
	createLrpReturns struct {
		result1 string
		result2 error
	}
	ScaleAppStub        func(name string, instances int) error
	scaleAppMutex       sync.RWMutex
	scaleAppArgsForCall []struct {
		name      string
		instances int
	}
	scaleAppReturns struct {
		result1 error
	}
	UpdateAppRoutesStub        func(name string, routes docker_app_runner.RouteOverrides) error
	updateAppRoutesMutex       sync.RWMutex
	updateAppRoutesArgsForCall []struct {
		name   string
		routes docker_app_runner.RouteOverrides
	}
	updateAppRoutesReturns struct {
		result1 error
	}
	RemoveAppStub        func(name string) error
	removeAppMutex       sync.RWMutex
	removeAppArgsForCall []struct {
		name string
	}
	removeAppReturns struct {
		result1 error
	}
}

func (fake *FakeAppRunner) CreateDockerApp(params docker_app_runner.CreateDockerAppParams) error {
	fake.createDockerAppMutex.Lock()
	fake.createDockerAppArgsForCall = append(fake.createDockerAppArgsForCall, struct {
		params docker_app_runner.CreateDockerAppParams
	}{params})
	fake.createDockerAppMutex.Unlock()
	if fake.CreateDockerAppStub != nil {
		return fake.CreateDockerAppStub(params)
	} else {
		return fake.createDockerAppReturns.result1
	}
}

func (fake *FakeAppRunner) CreateDockerAppCallCount() int {
	fake.createDockerAppMutex.RLock()
	defer fake.createDockerAppMutex.RUnlock()
	return len(fake.createDockerAppArgsForCall)
}

func (fake *FakeAppRunner) CreateDockerAppArgsForCall(i int) docker_app_runner.CreateDockerAppParams {
	fake.createDockerAppMutex.RLock()
	defer fake.createDockerAppMutex.RUnlock()
	return fake.createDockerAppArgsForCall[i].params
}

func (fake *FakeAppRunner) CreateDockerAppReturns(result1 error) {
	fake.CreateDockerAppStub = nil
	fake.createDockerAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRunner) CreateLrp(createLrpJson []byte) (string, error) {
	fake.createLrpMutex.Lock()
	fake.createLrpArgsForCall = append(fake.createLrpArgsForCall, struct {
		createLrpJson []byte
	}{createLrpJson})
	fake.createLrpMutex.Unlock()
	if fake.CreateLrpStub != nil {
		return fake.CreateLrpStub(createLrpJson)
	} else {
		return fake.createLrpReturns.result1, fake.createLrpReturns.result2
	}
}

func (fake *FakeAppRunner) CreateLrpCallCount() int {
	fake.createLrpMutex.RLock()
	defer fake.createLrpMutex.RUnlock()
	return len(fake.createLrpArgsForCall)
}

func (fake *FakeAppRunner) CreateLrpArgsForCall(i int) []byte {
	fake.createLrpMutex.RLock()
	defer fake.createLrpMutex.RUnlock()
	return fake.createLrpArgsForCall[i].createLrpJson
}

func (fake *FakeAppRunner) CreateLrpReturns(result1 string, result2 error) {
	fake.CreateLrpStub = nil
	fake.createLrpReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRunner) ScaleApp(name string, instances int) error {
	fake.scaleAppMutex.Lock()
	fake.scaleAppArgsForCall = append(fake.scaleAppArgsForCall, struct {
		name      string
		instances int
	}{name, instances})
	fake.scaleAppMutex.Unlock()
	if fake.ScaleAppStub != nil {
		return fake.ScaleAppStub(name, instances)
	} else {
		return fake.scaleAppReturns.result1
	}
}

func (fake *FakeAppRunner) ScaleAppCallCount() int {
	fake.scaleAppMutex.RLock()
	defer fake.scaleAppMutex.RUnlock()
	return len(fake.scaleAppArgsForCall)
}

func (fake *FakeAppRunner) ScaleAppArgsForCall(i int) (string, int) {
	fake.scaleAppMutex.RLock()
	defer fake.scaleAppMutex.RUnlock()
	return fake.scaleAppArgsForCall[i].name, fake.scaleAppArgsForCall[i].instances
}

func (fake *FakeAppRunner) ScaleAppReturns(result1 error) {
	fake.ScaleAppStub = nil
	fake.scaleAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRunner) UpdateAppRoutes(name string, routes docker_app_runner.RouteOverrides) error {
	fake.updateAppRoutesMutex.Lock()
	fake.updateAppRoutesArgsForCall = append(fake.updateAppRoutesArgsForCall, struct {
		name   string
		routes docker_app_runner.RouteOverrides
	}{name, routes})
	fake.updateAppRoutesMutex.Unlock()
	if fake.UpdateAppRoutesStub != nil {
		return fake.UpdateAppRoutesStub(name, routes)
	} else {
		return fake.updateAppRoutesReturns.result1
	}
}

func (fake *FakeAppRunner) UpdateAppRoutesCallCount() int {
	fake.updateAppRoutesMutex.RLock()
	defer fake.updateAppRoutesMutex.RUnlock()
	return len(fake.updateAppRoutesArgsForCall)
}

func (fake *FakeAppRunner) UpdateAppRoutesArgsForCall(i int) (string, docker_app_runner.RouteOverrides) {
	fake.updateAppRoutesMutex.RLock()
	defer fake.updateAppRoutesMutex.RUnlock()
	return fake.updateAppRoutesArgsForCall[i].name, fake.updateAppRoutesArgsForCall[i].routes
}

func (fake *FakeAppRunner) UpdateAppRoutesReturns(result1 error) {
	fake.UpdateAppRoutesStub = nil
	fake.updateAppRoutesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRunner) RemoveApp(name string) error {
	fake.removeAppMutex.Lock()
	fake.removeAppArgsForCall = append(fake.removeAppArgsForCall, struct {
		name string
	}{name})
	fake.removeAppMutex.Unlock()
	if fake.RemoveAppStub != nil {
		return fake.RemoveAppStub(name)
	} else {
		return fake.removeAppReturns.result1
	}
}

func (fake *FakeAppRunner) RemoveAppCallCount() int {
	fake.removeAppMutex.RLock()
	defer fake.removeAppMutex.RUnlock()
	return len(fake.removeAppArgsForCall)
}

func (fake *FakeAppRunner) RemoveAppArgsForCall(i int) string {
	fake.removeAppMutex.RLock()
	defer fake.removeAppMutex.RUnlock()
	return fake.removeAppArgsForCall[i].name
}

func (fake *FakeAppRunner) RemoveAppReturns(result1 error) {
	fake.RemoveAppStub = nil
	fake.removeAppReturns = struct {
		result1 error
	}{result1}
}

var _ docker_app_runner.AppRunner = new(FakeAppRunner)
