// Code generated by protoc-gen-gogo.
// source: controlmessage.proto
// DO NOT EDIT!

/*
Package control is a generated protocol buffer package.

It is generated from these files:
	controlmessage.proto
	heartbeatrequest.proto
	uuid.proto

It has these top-level messages:
	ControlMessage
*/
package control

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// / Type of the wrapped control.
type ControlMessage_ControlType int32

const (
	ControlMessage_HeartbeatRequest ControlMessage_ControlType = 1
)

var ControlMessage_ControlType_name = map[int32]string{
	1: "HeartbeatRequest",
}
var ControlMessage_ControlType_value = map[string]int32{
	"HeartbeatRequest": 1,
}

func (x ControlMessage_ControlType) Enum() *ControlMessage_ControlType {
	p := new(ControlMessage_ControlType)
	*p = x
	return p
}
func (x ControlMessage_ControlType) String() string {
	return proto.EnumName(ControlMessage_ControlType_name, int32(x))
}
func (x *ControlMessage_ControlType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ControlMessage_ControlType_value, data, "ControlMessage_ControlType")
	if err != nil {
		return err
	}
	*x = ControlMessage_ControlType(value)
	return nil
}

// / ControlMessage wraps a control command and adds metadata.
type ControlMessage struct {
	Origin           *string                     `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	Identifier       *UUID                       `protobuf:"bytes,2,req,name=identifier" json:"identifier,omitempty"`
	Timestamp        *int64                      `protobuf:"varint,3,req,name=timestamp" json:"timestamp,omitempty"`
	ControlType      *ControlMessage_ControlType `protobuf:"varint,4,req,name=controlType,enum=control.ControlMessage_ControlType" json:"controlType,omitempty"`
	HeartbeatRequest *HeartbeatRequest           `protobuf:"bytes,5,opt,name=heartbeatRequest" json:"heartbeatRequest,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *ControlMessage) Reset()         { *m = ControlMessage{} }
func (m *ControlMessage) String() string { return proto.CompactTextString(m) }
func (*ControlMessage) ProtoMessage()    {}

func (m *ControlMessage) GetOrigin() string {
	if m != nil && m.Origin != nil {
		return *m.Origin
	}
	return ""
}

func (m *ControlMessage) GetIdentifier() *UUID {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *ControlMessage) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ControlMessage) GetControlType() ControlMessage_ControlType {
	if m != nil && m.ControlType != nil {
		return *m.ControlType
	}
	return ControlMessage_HeartbeatRequest
}

func (m *ControlMessage) GetHeartbeatRequest() *HeartbeatRequest {
	if m != nil {
		return m.HeartbeatRequest
	}
	return nil
}

func init() {
	proto.RegisterEnum("control.ControlMessage_ControlType", ControlMessage_ControlType_name, ControlMessage_ControlType_value)
}
func (m *ControlMessage) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Origin = &s
			index = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identifier == nil {
				m.Identifier = &UUID{}
			}
			if err := m.Identifier.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlType", wireType)
			}
			var v ControlMessage_ControlType
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (ControlMessage_ControlType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ControlType = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatRequest == nil {
				m.HeartbeatRequest = &HeartbeatRequest{}
			}
			if err := m.HeartbeatRequest.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("origin")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("identifier")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("timestamp")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("controlType")
	}

	return nil
}
func (m *ControlMessage) Size() (n int) {
	var l int
	_ = l
	if m.Origin != nil {
		l = len(*m.Origin)
		n += 1 + l + sovControlmessage(uint64(l))
	}
	if m.Identifier != nil {
		l = m.Identifier.Size()
		n += 1 + l + sovControlmessage(uint64(l))
	}
	if m.Timestamp != nil {
		n += 1 + sovControlmessage(uint64(*m.Timestamp))
	}
	if m.ControlType != nil {
		n += 1 + sovControlmessage(uint64(*m.ControlType))
	}
	if m.HeartbeatRequest != nil {
		l = m.HeartbeatRequest.Size()
		n += 1 + l + sovControlmessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovControlmessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozControlmessage(x uint64) (n int) {
	return sovControlmessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ControlMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ControlMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Origin == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("origin")
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintControlmessage(data, i, uint64(len(*m.Origin)))
		i += copy(data[i:], *m.Origin)
	}
	if m.Identifier == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("identifier")
	} else {
		data[i] = 0x12
		i++
		i = encodeVarintControlmessage(data, i, uint64(m.Identifier.Size()))
		n1, err := m.Identifier.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Timestamp == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("timestamp")
	} else {
		data[i] = 0x18
		i++
		i = encodeVarintControlmessage(data, i, uint64(*m.Timestamp))
	}
	if m.ControlType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("controlType")
	} else {
		data[i] = 0x20
		i++
		i = encodeVarintControlmessage(data, i, uint64(*m.ControlType))
	}
	if m.HeartbeatRequest != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintControlmessage(data, i, uint64(m.HeartbeatRequest.Size()))
		n2, err := m.HeartbeatRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Controlmessage(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Controlmessage(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintControlmessage(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
