#!/bin/bash

set -e

extract_deliver_stories_message() {
    git log origin/master..$GO_REVISION_LATTICE | \
        egrep -io "\[\s*(?:Finishes|Fixes)\s*(#(\d+)\s*)+\]" | \
        perl -p -e 's/\[\s*(?:Finishes|Fixes)\s*((?:#[0-9]+\s*)+)\]/\[Delivers $1\]/gi'
}

update_godeps() {
    setup_go_env

    construct_ltc_gopath

    echo "Removing $LATTICE_SRC_PATH/ltc/Godeps folder"
    rm -rf $LATTICE_SRC_PATH/ltc/Godeps

    pushd $GOPATH/src/github.com/cloudfoundry-incubator/lattice/ltc > /dev/null
        echo -n "Removing $(pwd)/Godeps .."
        rm -rf Godeps
        sync
        echo "DONE!"

        echo "Saving off ltc Godeps from constructed GOPATH .."
        godep save
        sync
        echo "godep saved"

        echo -n "Copying ltc/Godeps from $(pwd) to $LATTICE_SRC_PATH/ltc .."
        cp -af Godeps $LATTICE_SRC_PATH/ltc/
        echo "DONE!"
    popd > /dev/null

    echo "== Godeps Json - BEGIN =="
    cat $LATTICE_SRC_PATH/ltc/Godeps/Godeps.json
    echo "== Godeps Json - END =="

    pushd $LATTICE_SRC_PATH/ltc > /dev/null
        git add Godeps

        if [ $(git diff --cached --numstat -- Godeps/ | wc -l) -gt 0 ]; then
            git commit -m "Update ltc Godeps

            Diego Release Git SHA: ${diego_release_git_sha}

            +Committed by GOCD- Run #$GO_PIPELINE_LABEL of Pipeline: $GO_PIPELINE_NAME, Stage: $GO_STAGE_NAME, JOB: $GO_JOB_NAME
            "
        fi
    popd > /dev/null
}

commit_terraform_examples() {
    pushd $LATTICE_SRC_PATH > /dev/null
        git commit -m "Bump Terraform Examples

        + Update terraform example files to point to source $lattice_version
        + Terraform now downloads Lattice $new_lattice_version

        +Committed by GOCD- Run #$GO_PIPELINE_LABEL of Pipeline: $GO_PIPELINE_NAME, Stage: $GO_STAGE_NAME, JOB: $GO_JOB_NAME
        "
    popd > /dev/null
}

bump_unstable_lattice() {
    get_diego_release_git_sha

    if [ "$diego_release_git_sha" != "$GO_REVISION_DIEGO_RELEASE" ]; then
        echo "Mismatch on diego-release SHA (git/gocd) :: ${diego_release_git_sha}/${GO_REVISION_DIEGO_RELEASE}"
    fi

    pushd $LATTICE_SRC_PATH > /dev/null
        git pull origin master
        git checkout master

        # Most of the time this will be a ff-only merge.
        # It won't be if there is a change to master, eg a README change or a PR merged directly into master
        # that hasn't made it back to develop yet.
        echo "merging develop into master"
        git merge develop -m "Merge branch 'develop' of github.com:cloudfoundry-incubator/lattice into master

        +Committed by GOCD- Run #$GO_PIPELINE_LABEL of Pipeline: $GO_PIPELINE_NAME, Stage: $GO_STAGE_NAME, JOB: $GO_JOB_NAME
        "

        update_godeps

        bump_lattice_version

        rewrite_terraform_examples
        commit_terraform_examples
    popd > /dev/null
}

repackage_unstable_lattice_tar() {
    get_lattice_version

    mkdir -pv ~/lattice-tmp
    pushd ~/lattice-tmp > /dev/null
        tar xzf $lattice_tar_path
        echo "$lattice_version" > lattice-build/common/LATTICE_VERSION

        tar czf lattice.tgz lattice-build
        cp -vf lattice.tgz $lattice_artifacts_staging_folder
    popd > /dev/null
    rm -rf ~/lattice-tmp
}

recompile_unstable_ltc() {
    get_lattice_version

    ## since `godep restore` was run, don't need to do godep go build
    go_build_ltc

    generate_ltc_tarball $lattice_artifacts_staging_folder
}

upload_unstable_lattice_tar_to_s3() {
    if [ -z "$DRY_RUN" ]; then
        aws s3 cp $lattice_artifacts_staging_folder/lattice.tgz "s3://lattice/unstable/latest/lattice.tgz"
        aws s3 cp $lattice_artifacts_staging_folder/lattice.tgz "s3://lattice/unstable/${lattice_version}/lattice.tgz"
    else
        echo "aws s3 cp $lattice_artifacts_staging_folder/lattice.tgz \"s3://lattice/unstable/latest/lattice.tgz\""
        echo "aws s3 cp $lattice_artifacts_staging_folder/lattice.tgz \"s3://lattice/unstable/${lattice_version}/lattice.tgz\""
    fi

    echo "lattice.tgz uploaded to s3"
}

upload_unstable_ltc_binaries_to_s3() {
    pushd $lattice_artifacts_staging_folder
        mkdir -pv ltc-binaries
        tar xzf ltc.tar.gz -C ltc-binaries
        local ltc_checksum
        ltc_checksum=$(cat ltc-binaries/ltc-checksum)
        echo "Unpacked ltc.tar.gz with ltc-checksum (git sha) = ${ltc_checksum}"

        if [ "${ltc_checksum}" != "${GO_REVISION_LATTICE}" ]; then
            echo "Mismatch on ltc-checksum SHA (ltc.tar.gz/gocd) :: ${ltc_checksum}/${GO_REVISION_LATTICE}"
        fi

        if [ -z "$DRY_RUN" ]; then
            aws s3 cp ltc-binaries/ltc-darwin-amd64 "s3://lattice/unstable/latest/darwin-amd64/ltc"
            aws s3 cp ltc-binaries/ltc-linux-amd64 "s3://lattice/unstable/latest/linux-amd64/ltc"

            aws s3 cp ltc-binaries/ltc-darwin-amd64 "s3://lattice/unstable/${lattice_version}/darwin-amd64/ltc"
            aws s3 cp ltc-binaries/ltc-linux-amd64 "s3://lattice/unstable/${lattice_version}/linux-amd64/ltc"
        else
            echo "aws s3 cp ltc-binaries/ltc-darwin-amd64 \"s3://lattice/unstable/latest/darwin-amd64/ltc\""
            echo "aws s3 cp ltc-binaries/ltc-linux-amd64 \"s3://lattice/unstable/latest/linux-amd64/ltc\""

            echo "aws s3 cp ltc-binaries/ltc-darwin-amd64 \"s3://lattice/unstable/${lattice_version}/darwin-amd64/ltc\""
            echo "aws s3 cp ltc-binaries/ltc-linux-amd64 \"s3://lattice/unstable/${lattice_version}/linux-amd64/ltc\""
        fi
    popd

    echo "ltc binaries uploaded to s3"
}

push_unstable_lattice() {
    pushd $LATTICE_SRC_PATH > /dev/null
        git checkout develop

        echo "merging master into develop"

        git merge master -m "Merge branch 'master' of github.com:cloudfoundry-incubator/lattice into develop

        +Committed by GOCD- Run #$GO_PIPELINE_LABEL of Pipeline: $GO_PIPELINE_NAME, Stage: $GO_STAGE_NAME, JOB: $GO_JOB_NAME
        "

        # Rebase in case there have been changes to origin/develop since the beginning of this pipeline run.
        # we want to get our godeps bump and merge commit stuff merged back into develop on top of external changes.
        git fetch origin develop
        git rebase origin/develop --preserve-merge

        if [ -z "$DRY_RUN" ] ; then
            git push origin master develop
        else
            git push origin master develop --dry-run
        fi
    popd > /dev/null

    echo "Successfully pushed updates to origin/master & origin/develop"
}

stage_pipeline_artifact() {
    local pipeline_version_artifact_path="/workspace/pipeline_published_lattice_version"
    pushd $LATTICE_SRC_PATH > /dev/null
        git checkout master
        cp -v Version $pipeline_version_artifact_path
    popd > /dev/null
}

source $(dirname $0)/../helpers/build_ltc_helpers

lattice_tar_path=${1:-/workspace/lattice.tgz}

lattice_artifacts_staging_folder="/workspace/lattice-unstable"
rm -rfv $lattice_artifacts_staging_folder
mkdir -pv $lattice_artifacts_staging_folder

setup_ssh_access_to_github

sync_up_tags_off_remote

bump_unstable_lattice

repackage_unstable_lattice_tar
recompile_unstable_ltc

upload_unstable_lattice_tar_to_s3
upload_unstable_ltc_binaries_to_s3

push_unstable_lattice

stage_pipeline_artifact
